// <auto-generated />
using System;
using BookManagerASP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookManagerASP.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookManagerASP.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookManagerASP.Models.BookPrivate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<int>("ShelfId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ShelfId");

                    b.ToTable("BooksPrivates");
                });

            modelBuilder.Entity("BookManagerASP.Models.BookUserReview", b =>
                {
                    b.Property<string>("UserEntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("UserEntityId", "ReviewId", "BookId");

                    b.HasIndex("BookId");

                    b.HasIndex("ReviewId");

                    b.ToTable("BookUserReviews");
                });

            modelBuilder.Entity("BookManagerASP.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BookPrivateId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<int?>("Page")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookPrivateId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("BookManagerASP.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("BookManagerASP.Models.Shelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEntityId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Shelves");
                });

            modelBuilder.Entity("BookManagerASP.Models.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserEntities");
                });

            modelBuilder.Entity("BookManagerASP.Models.BookPrivate", b =>
                {
                    b.HasOne("BookManagerASP.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookManagerASP.Models.Shelf", "Shelf")
                        .WithMany("BookPrivates")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("BookManagerASP.Models.BookUserReview", b =>
                {
                    b.HasOne("BookManagerASP.Models.Book", "Book")
                        .WithMany("BookUserReviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookManagerASP.Models.Review", "Review")
                        .WithMany("BookUserReviews")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookManagerASP.Models.UserEntity", "UserEntity")
                        .WithMany("BookUserReviews")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Review");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BookManagerASP.Models.Quote", b =>
                {
                    b.HasOne("BookManagerASP.Models.BookPrivate", null)
                        .WithMany("Quotes")
                        .HasForeignKey("BookPrivateId");
                });

            modelBuilder.Entity("BookManagerASP.Models.Shelf", b =>
                {
                    b.HasOne("BookManagerASP.Models.UserEntity", null)
                        .WithMany("Shelves")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("BookManagerASP.Models.Book", b =>
                {
                    b.Navigation("BookUserReviews");
                });

            modelBuilder.Entity("BookManagerASP.Models.BookPrivate", b =>
                {
                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("BookManagerASP.Models.Review", b =>
                {
                    b.Navigation("BookUserReviews");
                });

            modelBuilder.Entity("BookManagerASP.Models.Shelf", b =>
                {
                    b.Navigation("BookPrivates");
                });

            modelBuilder.Entity("BookManagerASP.Models.UserEntity", b =>
                {
                    b.Navigation("BookUserReviews");

                    b.Navigation("Shelves");
                });
#pragma warning restore 612, 618
        }
    }
}
